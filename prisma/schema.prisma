// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../apps/web/node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  @db.VarChar(50)
  provider          String  @db.VarChar(50)
  providerAccountId String  @db.VarChar(100)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(50)
  scope             String? @db.VarChar(500)
  id_token          String? @db.Text
  session_state     String? @db.VarChar(100)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(191)
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?       @db.VarChar(100)
  email         String        @unique @db.VarChar(191)
  emailVerified DateTime?
  image         String?       @db.VarChar(500)
  skills        Json          // keywords maintained by user (JSON array)
  locations     Json          // preferred locations (JSON array)
  preferences   Json?         // additional preferences as JSON
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  applications  Application[]
}

model VerificationToken {
  identifier String   @db.VarChar(100)
  token      String   @unique @db.VarChar(100)
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id           String        @id @default(cuid())
  source       String        @db.VarChar(50) // "remotive", "remoteok", etc.
  sourceId     String?       @db.VarChar(100) // external ID from the source
  title        String        @db.VarChar(500)
  company      String        @db.VarChar(200)
  locations    Json          // locations as JSON array
  remote       Boolean       @default(false)
  url          String        @unique @db.VarChar(191)
  description  String?       @db.Text
  salaryMin    Int?
  salaryMax    Int?
  currency     String?
  tags         Json          // skills/technologies mentioned (JSON array)
  postedAt     DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  score        Int           @default(0)
  hidden       Boolean       @default(false) // user can hide jobs
  applications Application[]

  @@index([score, postedAt])
  @@index([source, sourceId])
}

model Application {
  id           String @id @default(cuid()) @db.VarChar(50)
  jobId        String @db.VarChar(50)
  job          Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId       String @db.VarChar(50)
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  status       AppStatus @default(LEAD)
  channel      Channel   @default(EMAIL)
  resumePath   String?   @db.VarChar(500) // path to uploaded resume
  coverText    String?   @db.Text // cover letter content
  emailId      String?   @db.VarChar(100) // Gmail message id (sent mail)
  threadId     String?   @db.VarChar(100) // Gmail thread id
  notes        String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  followupAt   DateTime? // when to send follow-up
  contactEmail String?   @db.VarChar(191) // contact email if different from job posting

  @@unique([userId, jobId])
}

enum AppStatus {
  LEAD
  APPLIED
  SCREEN
  TECH
  ONSITE
  OFFER
  HIRED
  REJECTED
}

enum Channel {
  EMAIL
  FORM
  REFERRAL
}